import asyncio
import os
import json  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ JSON
from twitchio.ext import commands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ—Ä—ë–º –∏–∑ Secrets)
CHANNEL_NAME = os.getenv("CHANNEL_NAME")  # –ò–º—è –∫–∞–Ω–∞–ª–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞
BOT_NICK = os.getenv("BOT_NICK")  # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ—Ç–∞
OAUTH_TOKEN = os.getenv("OAUTH_TOKEN")  # –í–∞—à OAuth-—Ç–æ–∫–µ–Ω
CLIENT_ID = os.getenv("CLIENT_ID")  # Client ID –∏–∑ Twitch Developer Portal
API_OAUTH_TOKEN = os.getenv("API_OAUTH_TOKEN")  # Access Token –¥–ª—è Twitch API

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö –≤–µ—Å–∞
HIGH_IMPACT_KEYWORDS = [
    "—Ç–∏–ª—å—Ç", "—Ç–∏–ª—å—Ç–∏—Ç", "—Ç–∏–ª—å—Ç–∏—Ç—å", "—Ç–∏–ª—å—Ç–∞–Ω—É–ª", "–Ω—ã—Ç–∏–∫", "–Ω–æ–µ—Ç", "–Ω—ã—Ç—å",
    "–Ω—é–Ω—è", "–∫–ª–æ—É–Ω", "—Å–≥–æ—Ä–µ–ª", "–ø—Ä–∏–≥–æ—Ä–µ–ª", "–±–µ–¥–Ω—ã–π", "–±–µ–¥–æ–ª–∞–≥–∞", "–±–µ–¥–Ω—è–≥–∞",
    "–∑–∞–∂—Ä–∞–ª—Å—è", ":clown_face:", "—Ç–µ—Ä–ø–∏", "–ø–ª–∞—á–µ—Ç", "–Ω—ã—Ç–∏–∫2–∫", "–∑–∞–µ–±–∞–ª", "—Ç–∞–±–ª–µ—Ç–∫–∏", "—Ç—é—Ç—è", "–¢–Æ–¢–Ø –ú–ê–¢–Æ–¢–Ø", "–∫—Ä—ã—Å–∞", "–∫—Ä—ã—Å–∞2–∫"
]
OTHER_KEYWORDS = [
    "–µ–±–ª–∞–Ω", "–ª–æ—Ö", "—Ö—É–µ—Å–æ—Å", "–¥–æ–ª–±–æ–µ–±", "–Ω–∞—Ö—É—è",
    "–Ω–∞—Ö—É–π", "–ø–∏–∑–¥–µ—Ü", "–ª–æ—à–∞—Ä–∞", "–¥–æ–¥–∏–∫", "–¥–∞–ª–±–∞–µ–±", "–¥–æ–ª–±–æ—ë–±", "–¥–æ–ª–±–æ–µ–±",
    "–¥–æ–ª–±–æ—ë–±", "–µ–±–∞–Ω–∞—Ç", "–µ–±–∞–Ω—É—Ç—ã–π", "–∏–¥–∏–æ—Ç", "–∞–ª–∫–∞—à",
    "–µ–±–∞–Ω—ã–π", "—É–µ–±–∞–Ω", "–º—É–¥–∞–∫", "–æ–≥—Ä", "–æ–≥—Ä2–∫", "—à—Ä–µ–∫", "—á—É–¥–æ–≤–∏—â–µ", "—á—É–¥–∏–∫",
    "—É–±–ª—é–¥–æ–∫", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–¥—É—Ä–∞–∫", "–¥—É—Ä–∞—á–æ–∫", "—Ç–≤–∞—Ä—å", "–ø–∏–∑–¥–∞–±–æ–ª",
    "—Å–æ—Å–µ—à—å", "—Ö—É–π–ª–∞–Ω", "—Ö—É–π–ª–æ", "—Å–ø–µ—Ä–º–æ–≥–ª–æ—Ç", "–ª—É–∑–µ—Ä",
    "–ø—Ä–∏–¥—É—Ä–æ–∫", "–Ω–∞—Ö", "–±–æ–º–∂", "–±–æ–º–∂–∞—Ä–∞", "–±–æ–º–∂2–∫",
    "–∏–¥–∏–æ—Ç–∏–Ω–∞", "–±—ã–¥–ª–æ", "–±—ã–¥–ª–æ2–∫", "–ø–µ—Å", "–ü–¨–Ø–ù–¨", "CoolStoryBob"
]

class Bot(commands.Bot):
    def __init__(self):
        super().__init__(
            token=OAUTH_TOKEN,
            client_id=CLIENT_ID,
            nick=BOT_NICK,
            prefix="!",
            initial_channels=[CHANNEL_NAME]
        )
        self.load_state()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        self.total_messages = 0  # –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.last_critical_warning_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        self.time_until_auto_message = 300  # –í—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —Ç–µ–ø–µ—Ä—å 5 –º–∏–Ω—É—Ç)
        self.last_tilter_command_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã !—Ç–∏–ª—å—Ç

    def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open("state.json", "r") as file:
                content = file.read()
                if content.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    data = json.loads(content)
                    self.internal_tilt_chance = data.get("tilt_chance", 0)  # –ó–∞–≥—Ä—É–∂–∞–µ–º tilt_chance –∏–ª–∏ 0
                else:
                    self.internal_tilt_chance = 0  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
        except FileNotFoundError:
            self.internal_tilt_chance = 0  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –≤ —Ñ–∞–π–ª."""
        with open("state.json", "w") as file:
            json.dump({"tilt_chance": self.internal_tilt_chance}, file)

    async def event_ready(self):
        print(f"–ë–æ—Ç {self.nick} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É {CHANNEL_NAME}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        asyncio.create_task(self.auto_tilt_message())
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
        asyncio.create_task(self.check_stream_status())
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        asyncio.create_task(self.report_time_until_auto_message())

    async def event_message(self, message):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if message.echo:
            return
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!")
        if message.content.startswith("!"):
            await self.handle_commands(message)
            return
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.total_messages += 1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        content = message.content.lower()
        if any(keyword in content for keyword in HIGH_IMPACT_KEYWORDS):
            self.internal_tilt_chance += 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –Ω–∞ 2%
        elif any(keyword in content for keyword in OTHER_KEYWORDS):
            self.internal_tilt_chance += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –Ω–∞ 1%
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –Ω–∞ 1%
        if self.total_messages % 100 == 0:
            self.internal_tilt_chance = max(0, self.internal_tilt_chance - 1)  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞, –Ω–æ –Ω–µ –Ω–∏–∂–µ 0%
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.save_state()
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"–¢–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞: {int(self.internal_tilt_chance)}%")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        if self.internal_tilt_chance >= 99:
            await self.send_critical_warning()

    @commands.command(name="—Ç–∏–ª—å—Ç")
    async def tilter_command(self, ctx):
        current_time = asyncio.get_event_loop().time()
        cooldown = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if current_time - self.last_tilter_command_time < cooldown:
            remaining_time = int(cooldown - (current_time - self.last_tilter_command_time))
            await ctx.send(f"@{ctx.author.name}, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        self.last_tilter_command_time = current_time
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"–¢–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞: {int(self.internal_tilt_chance)}%")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = f"@{ctx.author.name}, {self.format_tilt_message(self.internal_tilt_chance)}"
        await ctx.send(response)

    async def auto_tilt_message(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç."""
        while True:
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
            for i in range(300, 0, -1):
                self.time_until_auto_message = i
                await asyncio.sleep(1)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π !—Ç–∏–ª—å—Ç –≤ –∫–æ–Ω—Ü–µ
            channel = self.get_channel(CHANNEL_NAME)
            await channel.send(
                f"{self.format_tilt_message(self.internal_tilt_chance)} !—Ç–∏–ª—å—Ç")

    def format_tilt_message(self, tilt_chance):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–≤–Ω–µ —Ç–∏–ª—å—Ç–∞ (–≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º—É–º 100%)."""
        displayed_chance = min(tilt_chance, 100)  # –í —á–∞—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100%
        if displayed_chance <= 30:
            return f"üòá –£—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –Ω–∏–∑–∫–∏–π: ({int(displayed_chance)}%) üòá"
        elif displayed_chance <= 70:
            return f"üòê –£—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ —Å—Ä–µ–¥–Ω–∏–π: ({int(displayed_chance)}%) üòê"
        elif displayed_chance <= 90:
            return f"üò° –£—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –≤—ã—Å–æ–∫–∏–π: ({int(displayed_chance)}%) üò°"
        else:
            return f"üî• –£—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: ({int(displayed_chance)}%) üî•"

    async def send_critical_warning(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç."""
        current_time = asyncio.get_event_loop().time()
        if current_time - self.last_critical_warning_time >= 600:  # 10 –º–∏–Ω—É—Ç
            self.last_critical_warning_time = current_time
            channel = self.get_channel(CHANNEL_NAME)
            await channel.send("üî• –í–ù–ò–ú–ê–ù–ò–ï! –£—Ä–æ–≤–µ–Ω—å —Ç–∏–ª—å—Ç–∞ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô! üî• (!—Ç–∏–ª—å—Ç)")
            print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    async def check_stream_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç."""
        while True:
            try:
                headers = {
                    "Authorization": f"Bearer {API_OAUTH_TOKEN}",
                    "Client-ID": CLIENT_ID
                }
                response = requests.get(
                    f"https://api.twitch.tv/helix/streams?user_login={CHANNEL_NAME}",
                    headers=headers)
                data = response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å—Ç—Ä–∏–º
                if data["data"]:
                    print("–°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è! –°—Ç–∞—Ç—É—Å: –í–ö–õ–Æ–ß–ï–ù")
                else:
                    print("–°—Ç—Ä–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –°—Ç–∞—Ç—É—Å: –í–´–ö–õ–Æ–ß–ï–ù")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞:", e)
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)

    async def report_time_until_auto_message(self):
        """–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        while True:
            print(
                f"–í—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {self.time_until_auto_message} —Å–µ–∫."
            )
            await asyncio.sleep(1)

    async def event_command_error(self, ctx, error):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–º–∞–Ω–¥."""
        if isinstance(error, commands.CommandNotFound):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        raise error  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = Bot()
    bot.run()
